// <auto-generated />
using System;
using HMS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMS.DAL.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230916070656_WasteManagement")]
    partial class WasteManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HMS.Models.Ambulance", b =>
                {
                    b.Property<int>("AmbulanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmbulanceID"), 1L, 1);

                    b.Property<string>("AmbulanceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DrivingLiense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmbulanceID");

                    b.ToTable("Ambulances");
                });

            modelBuilder.Entity("HMS.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AppointmentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int?>("NurseID")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("NurseID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HMS.Models.Bill", b =>
                {
                    b.Property<int>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillID"), 1L, 1);

                    b.Property<decimal>("BillAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("date");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BillingNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("TransactionInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isInsurance")
                        .HasColumnType("bit");

                    b.HasKey("BillID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HMS.Models.BloodBank", b =>
                {
                    b.Property<int>("BloodBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodBankID"), 1L, 1);

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("BloodBankID");

                    b.ToTable("BloodBanks");
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentDescription = "It is concerned with disorders and diseases of the nervous system",
                            DepartmentName = "Neurology"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentDescription = "The branch of medicine dealing with children and their diseases.",
                            DepartmentName = "Paediatrics"
                        });
                });

            modelBuilder.Entity("HMS.Models.DischargeTransfer", b =>
                {
                    b.Property<int>("DT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DT_ID"), 1L, 1);

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DT_ID");

                    b.ToTable("DischargeTransfers");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Doctortype")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Doctors");
                });



            modelBuilder.Entity("HMS.Models.LabEquipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("EquipmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("LabEquipments");
                });

            modelBuilder.Entity("HMS.Models.LabTechnician", b =>
                {
                    b.Property<int>("TechnicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<string>("TechnicianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TechnicianType")
                        .HasColumnType("int");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("TechnicianID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("LabTechnicians");
                });

            modelBuilder.Entity("HMS.Models.LabTest", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"), 1L, 1);

                    b.Property<int?>("LabTechnicianTechnicianID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.HasIndex("LabTechnicianTechnicianID");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("HMS.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerID"), 1L, 1);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerID");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("HMS.Models.MedicalRecords", b =>
                {
                    b.Property<int>("MedicalRecordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordsID"), 1L, 1);

                    b.Property<int?>("LabTestTestID")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<bool>("PatientType")
                        .HasColumnType("bit");

                    b.Property<int?>("PrescriptionsPrescriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalRecordsID");

                    b.HasIndex("LabTestTestID");

                    b.HasIndex("PrescriptionsPrescriptionID");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HMS.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineID"), 1L, 1);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<int>("MedicineGenericID")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineID");

                    b.HasIndex("ManufacturerID");

                    b.HasIndex("MedicineGenericID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HMS.Models.MedicineGeneric", b =>
                {
                    b.Property<int>("MedicineGenericID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineGenericID"), 1L, 1);

                    b.Property<string>("MedicineGenericNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineGenericID");

                    b.ToTable("MedicineGeneric");
                });

            modelBuilder.Entity("HMS.Models.Morgue", b =>
                {
                    b.Property<int>("MorgueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MorgueID"), 1L, 1);

                    b.Property<string>("MorgueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MorgueID");

                    b.ToTable("Morgues");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.Property<int>("NurseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<int>("NurseLevel")
                        .HasColumnType("int");

                    b.Property<string>("NurseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NurseType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("NurseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("HMS.Models.OtherEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("OtherEmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OtherEmployeeType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("OtherEmployees");
                });

            modelBuilder.Entity("HMS.Models.Outdoor", b =>
                {
                    b.Property<int>("OutdoorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutdoorID"), 1L, 1);

                    b.Property<int>("BillID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmissionRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("date");

                    b.Property<int>("TreatmentType")
                        .HasColumnType("int");

                    b.HasKey("OutdoorID");

                    b.HasIndex("BillID");

                    b.HasIndex("PatientID");

                    b.ToTable("Outdoors");
                });

            modelBuilder.Entity("HMS.Models.PatientRegister", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsTransferred")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.ToTable("PatientRegisters");

                    b.HasData(
                        new
                        {
                            PatientID = 1,
                            Address = "dhaka",
                            AdmissionDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 6,
                            DateOfBirth = new DateTime(1999, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "am@gmail.com",
                            EmergencyContact = "123456789",
                            Gender = 2,
                            IsTransferred = false,
                            PatientName = "amina begum",
                            PhoneNumber = "12345678",
                            WardID = 1
                        },
                        new
                        {
                            PatientID = 2,
                            Address = "Pabna",
                            AdmissionDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 8,
                            DateOfBirth = new DateTime(1971, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "az@gmail.com",
                            EmergencyContact = "123456789",
                            Gender = 1,
                            IsTransferred = false,
                            PatientName = "Azman Mollah",
                            PhoneNumber = "1233454",
                            WardID = 3
                        });
                });

            modelBuilder.Entity("HMS.Models.Prescriptions", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"), 1L, 1);

                    b.Property<bool>("AdmissionSuggested")
                        .HasColumnType("bit");

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("date");

                    b.Property<string>("DiagonesNotes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("FollowUpInstructions")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MedicinID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextVisit")
                        .HasColumnType("date");

                    b.Property<int?>("NurseID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientRegisterPatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("date");

                    b.Property<string>("ProgressNotes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SymptomStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientRegisterPatientID");

                    b.HasIndex("TestID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"), 1L, 1);

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("HMS.Models.SurgeryWard.SurgeryProcedure", b =>
                {
                    b.Property<int>("SurgeryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryID"), 1L, 1);

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int?>("NurseID")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Postoperative_Diagnosis")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Preoperative_Diagnosis")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionsPrescriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("date");

                    b.Property<int>("SurgeryType")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("SurgeryID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("PrescriptionsPrescriptionID");

                    b.HasIndex("TestID");

                    b.ToTable("SurgeryProcedures");
                });

            modelBuilder.Entity("HMS.Models.SurgeryWard.WardCabin", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"), 1L, 1);

                    b.Property<int>("BedCabinNumber")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WardID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("WardCabins");

                    b.HasData(
                        new
                        {
                            WardID = 1,
                            BedCabinNumber = 23,
                            DepartmentID = 1,
                            WardName = "Neuro Care"
                        },
                        new
                        {
                            WardID = 2,
                            BedCabinNumber = 40,
                            DepartmentID = 2,
                            WardName = "Child Care"
                        },
                        new
                        {
                            WardID = 3,
                            BedCabinNumber = 12,
                            DepartmentID = 1,
                            WardName = "Nerve Care"
                        });
                });

            modelBuilder.Entity("HMS.Models.WasteManagement", b =>
                {
                    b.Property<int>("WasteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WasteID"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DisposalDate")
                        .HasColumnType("date");

                    b.Property<string>("DisposalMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextScheduleDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("WasteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WasteID");

                    b.ToTable("WasteManagements");
                });

            modelBuilder.Entity("HMS.Models.Appointment", b =>
                {
                    b.HasOne("HMS.Models.Nurse", null)
                        .WithMany("Appointments")
                        .HasForeignKey("NurseID");
                });

            modelBuilder.Entity("HMS.Models.Bill", b =>
                {
                    b.HasOne("HMS.Models.Service", "Service")
                        .WithMany("Bills")
                        .HasForeignKey("ServiceID");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.HasOne("HMS.Models.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });



            modelBuilder.Entity("HMS.Models.LabEquipment", b =>
                {
                    b.HasOne("HMS.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HMS.Models.LabTechnician", b =>
                {
                    b.HasOne("HMS.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HMS.Models.LabTest", b =>
                {
                    b.HasOne("HMS.Models.LabTechnician", null)
                        .WithMany("Labtest")
                        .HasForeignKey("LabTechnicianTechnicianID");
                });

            modelBuilder.Entity("HMS.Models.MedicalRecords", b =>
                {
                    b.HasOne("HMS.Models.LabTest", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("LabTestTestID");

                    b.HasOne("HMS.Models.Prescriptions", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PrescriptionsPrescriptionID");
                });

            modelBuilder.Entity("HMS.Models.Medicine", b =>
                {
                    b.HasOne("HMS.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.MedicineGeneric", "MedicineGeneric")
                        .WithMany()
                        .HasForeignKey("MedicineGenericID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("MedicineGeneric");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.HasOne("HMS.Models.Department", null)
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.Outdoor", b =>
                {
                    b.HasOne("HMS.Models.Bill", "Bill")
                        .WithMany("Outdoors")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.PatientRegister", "PatientRegister")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("Bill");

                    b.Navigation("PatientRegister");
                });

            modelBuilder.Entity("HMS.Models.Prescriptions", b =>
                {
                    b.HasOne("HMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Nurse", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("NurseID");

                    b.HasOne("HMS.Models.PatientRegister", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientRegisterPatientID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HMS.Models.LabTest", "LabTest")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("HMS.Models.SurgeryWard.SurgeryProcedure", b =>
                {
                    b.HasOne("HMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Nurse", null)
                        .WithMany("SurgeryProcedures")
                        .HasForeignKey("NurseID");

                    b.HasOne("HMS.Models.Prescriptions", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HMS.Models.Prescriptions", null)
                        .WithMany("SurgeryProcedures")
                        .HasForeignKey("PrescriptionsPrescriptionID");

                    b.HasOne("HMS.Models.LabTest", "LabTest")
                        .WithMany("SurgeryProcedures")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("LabTest");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMS.Models.SurgeryWard.WardCabin", b =>
                {
                    b.HasOne("HMS.Models.Department", null)
                        .WithMany("WardCabins")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.Bill", b =>
                {
                    b.Navigation("Outdoors");
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("WardCabins");
                });

            modelBuilder.Entity("HMS.Models.LabTechnician", b =>
                {
                    b.Navigation("Labtest");
                });

            modelBuilder.Entity("HMS.Models.LabTest", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");

                    b.Navigation("SurgeryProcedures");
                });



            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");

                    b.Navigation("SurgeryProcedures");
                });

            modelBuilder.Entity("HMS.Models.PatientRegister", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.Prescriptions", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("SurgeryProcedures");
                });

            modelBuilder.Entity("HMS.Models.Service", b =>
                {
                    b.Navigation("Bills");
                });
#pragma warning restore 612, 618
        }
    }
}
